syntax = "proto3";

// import providers definitions
import "providers.proto";

// import sport definitions
import "sports.proto";

// import base model, general for all sports
import "base_model.proto";

// import each sport model
import "league_tables.proto";
import "odds.proto";
import "category.proto";

option java_multiple_files = true;

package com.livescore.rpc_core;

enum MessageType {

    MATCH_STATUS_UPDATE = 0;
    MATCH_INFO_UPDATE = 1;
    MATCH_SCORE = 3;
    MATCH_SERIES = 4;
    START_DATE_TIME_UPDATE = 5;
    STATISTICS = 6;
    SUBSTITUTIONS = 7;
    INCIDENT = 8;
    INCIDENT_DELETION = 9;
    INCIDENT_CONFIRMATION = 30;
    COMMENTARY = 10;
    ADD_COMMENTARY = 11;
    LINEUP = 13;
    FORMATION = 14;

    MATCH_MAPPING = 15;
    MATCH_DELETED = 2;
    MATCH_CONDITIONS = 16;
    MATCH_TYPE = 17;
    SCOUT_CONNECTION = 18;
    REFEREE = 19;
    VENUE = 20;
    PARTICIPANT_UPDATE = 21;
    WINNER_UPDATE = 22;
    COVERAGE = 23;
    ROUND = 24;
    ACTUAL_START_DATE_TIME_UPDATE = 25;
    ACTUAL_END_DATE_TIME_UPDATE = 26;

    FULL_MATCH_DATA = 27;

    LEAGUE_TABLE = 28;

    MATCH_COVERAGE_CANCELLATION = 29;

    COMMAND_FAILURE = 31;

    PROVIDER_CONNECTION = 32;

    MATCH_REMINDER = 33;

    ODDS_DATA = 34;

    STAGE = 35;

    STAGE_EVENT_DELETED = 36;

    FULL_LEAGUE_TABLE_DATA = 37;

    STAGE_EVENT_UPDATE = 38;

    FULL_STAGE_DATA = 39;

    HEAD_TO_HEAD = 40;

    PARTICIPANT_ENTITY = 41;

    // LastEventsMessage
    PARTICIPANT_HISTORY_UPDATE = 42;

    INNING = 43;

    PARTICIPANT_DATA = 44;

    MEDIA = 45;

    HORSE_RACING = 46;
}

// Common and required headers, used both in the envelope and in the
message Headers {

    // the provider
    Provider provider = 1;

    // the sport
    Sports sport = 2;

    oneof entity_id {
        // the provider specific match id
        string match_id = 3;

        // the provider specific participant id
        string participant_id = 4;

        // TODO: for FULL_LEAGUE_TABLE_DATA. do we need to use something like stageId + categoryId here?
        // the provider specific stage id
        string stage_id = 5;
    }

    // the internal match id
    string internal_match_id = 6;

    // timestamp of when the message was created
    int64 timestamp = 7;

    // whether the message contains the full match data
    bool is_full_match_data = 8;

    // message type so that we can easily cast the message
    MessageType message_type = 9;

    int64 crawlerTimestamp = 10;
}

// SERVER BASE MESSAGE
// This is the message that is then sent to the server
message EnvelopeMessage {
    Headers headers = 1;
    int32 counter = 2;
    UpdateMessage message = 3;
    int64 offset = 4;
}

// PROVIDER SPECIFIC BASE MESSAGE
// This is the message that the clients (provider specific implementations) will use to interact with this lib
message UpdateMessage {

    Headers headers = 1;

    oneof body {

        // BASIC INFO
        MatchStatusMessage match_status = 3;
        MatchCoverageMessage coverage = 4;
        MatchScoutStatusMessage scout_status = 5;
        MatchParticipantUpdateMessage participant_update = 6;
        MatchWinnerMessage winner = 7;
        MatchActualStartDateTimeMessage actual_start_date_time = 8;
        MatchActualEndDateTimeMessage actual_end_date_time = 9;
        MatchTypeMessage match_type = 10;
        MatchRoundMessage round = 11;
        MappedMatchMessage mappedMatch = 12;

        // DETAILS
        MatchConditionsMessage match_conditions = 13;
        VenueMessage venue = 14;
        LineupMessage lineup = 15;
        RefereeMessage referee = 16;
        MatchStatisticMessage statistics = 17;
        MatchCommentariesMessage commentary = 18;
        AddMatchCommentariesMessage match_commentary_add = 19;
        IncidentMessage incident = 20;
        ConfirmIncidentMessage confirm_incident = 32;
        DeleteIncidentMessage delete_incident = 21;
        ParticipantDataMessage participantDataMessage = 46;

        // BASE SPORT
        MatchInfoMessage match_info = 22;
        ScoreMessage match_score = 24;
        MatchStartDateTimeMessage start_date_time = 25;
        GameSeriesMessage soccer_match_series = 26;
        FormationMessage soccer_match_formation = 27;

        // API
        FullMatchDataMessage fullMatchData = 28;
        MatchDeletedMessage match_deleted = 23;

        //
        LeagueTableMessage leagueTable = 29;
        LeagueTablePropertiesMessage leagueTableProperties = 30;

        // SYSTEM/MAINTENANCE
        MatchCoverageCancellationMessage coverageCancellation = 31;

        CommandFailureMessage commandFailure = 33;

        ProviderConnectionStatusMessage providerStatus = 34;

        MatchReminderMessage matchReminder = 35;

        // ODDS
        OddsDataMessage odds_data_message = 36;

        // Stages
        StageMessage stage_message = 37;

        StageEventDeletedMessage stage_event_deleted_message = 38;

        FullLeagueTableDataMessage full_league_table_message = 39;

        StageEventUpdateMessage stage_event_update_message = 40;

        FullStageUpdateMessage full_stage_update_message = 41;

        HeadToHeadMessage headToHeadMessage = 42;

        LastEventsMessage lastEventsMessage = 43;

        ParticipantEntityMessage participantEntityMessage = 44;

        InningMessage inning = 45;

        MediaMessage media = 47;

        HorseRacingMessage horse_racing = 48;

    }

}
